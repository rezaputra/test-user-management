datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?         @unique
    role          UserRole        @default(USER)
    emailVerified DateTime?
    password      String?
    image         String?
    group         Group?          @relation(fields: [groupId], references: [id])
    groupId       String?         @db.ObjectId
    accounts      Account[]
    sessions      Session[]
    authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Group {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    users             User[]
    groupApplications GroupApplication[]
    menuAccesses      MenuAccess[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GroupApplication {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    groupId       String @map("_group_id") @db.ObjectId
    applicationId String @map("_application_id") @db.ObjectId

    group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
    application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([groupId, applicationId])
}

model Application {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    description       String?
    source            String
    order             Int                @unique
    menus             Menu[]
    groupApplications GroupApplication[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MenuAccess {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    groupId String @map("_group_id") @db.ObjectId
    menuId  String @map("_menu_id") @db.ObjectId

    group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
    menu  Menu  @relation(fields: [menuId], references: [id], onDelete: Cascade)

    canCreate Boolean @default(false)
    canRead   Boolean @default(false)
    canUpdate Boolean @default(false)
    canDelete Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([groupId, menuId])
}

model Menu {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    applicationId String       @db.ObjectId
    application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    menuAccesses  MenuAccess[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    id                   String  @id @default(auto()) @map("_id") @db.ObjectId
    credentialID         String  @unique
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
